{
  "args_schema_version": "pydantic_v1",
  "has_args_schemas": true,
  "manifest_version": 1,
  "task_list": [
    {
      "args_schema": {
        "title": "CreateOmeZarrMd",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of paths to the input files (Fractal managed)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "Path to the output file (Fractal managed)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Metadata dictionary (Fractal managed)"
          },
          "zarr_name": {
            "title": "Zarr Name",
            "default": "Plate",
            "type": "string",
            "description": "Name of the zarr plate file that will be created"
          },
          "mode": {
            "title": "Mode",
            "default": "all",
            "type": "string",
            "description": "Mode can be 4 values: \"z-steps\" (only parse the 3D data), \"top-level\" (only parse the 2D data), \"all\" (parse both), \"zmb\" (zmb-parser, detect mode automatically)"
          },
          "layout": {
            "title": "Layout",
            "default": 96,
            "type": "integer",
            "description": "Plate layout for the Zarr file. Valid options are 96 and 384"
          },
          "query": {
            "title": "Query",
            "default": "",
            "type": "string",
            "description": "Pandas query to filter intput-filenames"
          },
          "order_name": {
            "title": "Order Name",
            "default": "example-order",
            "type": "string",
            "description": "Name of the order"
          },
          "barcode": {
            "title": "Barcode",
            "default": "example-barcode",
            "type": "string",
            "description": "Barcode of the plate"
          },
          "overwrite": {
            "title": "Overwrite",
            "default": true,
            "type": "boolean",
            "description": "Whether to overwrite the zarr file if it already exists"
          },
          "num_levels": {
            "title": "Num Levels",
            "default": 5,
            "description": "Number of levels to generate in the zarr file"
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "metadata"
        ],
        "additionalProperties": false
      },
      "default_args": {
        "mode": "all"
      },
      "executable": "create_ome_zarr_md.py",
      "input_type": "image",
      "meta": {
        "cpus_per_task": 1,
        "mem": 1000
      },
      "name": "Create OME-Zarr MD",
      "output_type": "zarr"
    },
    {
      "args_schema": {
        "title": "MdToOmeZarr",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of paths to the input files (Fractal managed)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "Path to the output file (Fractal managed)"
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Component name, e.g. \"plate_name.zarr/B/03/0\" (Fractal managed)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Metadata dictionary (Fractal managed)"
          },
          "grid_montage": {
            "title": "Grid Montage",
            "default": true,
            "type": "boolean",
            "description": "Force FOVs into closest grid cells"
          },
          "memory_efficient": {
            "title": "Memory Efficient",
            "default": true,
            "type": "boolean",
            "description": "Load images via dask (more memory efficient for 3D)"
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata"
        ],
        "additionalProperties": false
      },
      "default_args": {},
      "executable": "md_to_ome_zarr.py",
      "input_type": "zarr",
      "meta": {
        "cpus_per_task": 1,
        "mem": 4000,
        "parallelization_level": "image"
      },
      "name": "Convert MD to OME-Zarr",
      "output_type": "zarr"
    }
  ]
}
